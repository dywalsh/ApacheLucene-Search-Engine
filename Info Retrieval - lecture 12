Info Retrieval - lecture 12

Ranking with Indexes

Data Structures
	Storing a list of items
		-Linked List
		-Array

	Find item based ipon an attribute
		-Hash Table

	More complex tasks
		-B trees
		-Priority Queues

	Text Search is different from traditional computing tasks
		-has its own kind of data structure
		-Inverted Index

		umbrella term for a range of diff, yet similar, data strucutres
		
	Ranking with Indexes
	-chicken and egg approach
	-query algorithm will depend on the retrieval model you use, will influence index
	-same in reverse

	Abstract model of ranking(high level overview of what abstract ranking means)
		-take a text doc
		-transformed into index terms or doc features
			-topicial doc features
				-topic of the content, degree to which a doc is about a certain subject
			-quality doc features
				-pieces of info that you have about a doc, that is not related to the content of the doc
					-e.g num of days since last updated
					-how accessible the page is
					-how many pages link to the page
					-similar to page rank(score associated with the page based on popularity not the content)
		-ranking function combines with the query, topical features and quality features -> does "magic" and spits out document score
			-R(Q,D) = SUM fi(D)gi(Q) // Q=query, D=document

		Inverted Index
			-all modern search engines follow this -> pretty much the index at the back of a text book
				-e,g Chinese food, 6-9, 39, 203, 212-245, 389 etc
				-search engine index is the same as the above, however instead of page numbers, its documents that the query occurs in.
				-inverted because usually words are thought of as a part of doc.
					-if we invert this, docs are associated with words.
				-Index terms often alphabetised.

			-in a search engine, that data associated with each term might be a list of docs or a list of word occurences.
			-each list entry is called a posting
				-the part of the posting that refers to a specific doc is 



				???



			-inverted indexes - doc ordered lists follow the same principle of textbook indexes where the smallest page number comes first, the smallest doc number comes first instead.
			-Document indexes
				-the simplest form of an inverted list stores just the documents that contain each word
				-

				????



			Scoring
			-consider the query: tropical fish -> fish 1,2,3
												->tropical 1,2,3
			-there is no way of discriminating between docs 1,2 and 3
			-Extened Index
				-term freq - num of times the term exists in the doc

					query "tropical fish" with term freqy: fish -> 1:2, 2:3, 3:2
							tropical-> 1:2, 2:2, 3:2

						hence document 2 has to most occurences (3), so most likely
				-term position
					-further facilitates discrimination
					-phrase identification


				-feature weighting: taking into account of characteristics of the doc or 
					-words dont have to occur in a doc or query to get a feature weight e.g fish is a descriptive word of a doc about types of fish, even if the word fish doesnt occur at all
					-how much a doc is about the feature word (Weight)
					
			Document Fields
				real docs are not just lsits of words
					-logical units formed by sentences and paragraphs
					-titles and headings that provide short summaries of the rest of the content

				speical classes of the doc have custom sections
					-every email contains sender and subject line

		**for assignment could weight titl words higher
		**could exclude author if they are rarely queried

				all of these a re instance of doc fields
					-sections ofd docs that carry semantic meaning

					preference rules/weighting for doc fields can be inteegratied into ranking function


			Extent lists
				-an extent is a contiguous region of a document
					-can manually specify (e.g title starts with one word and ends with another -> title starts at word 1 and ends at word 4 ->> extent(1,4) )
						-subtitle(4,9)
						-author(9,11)

					can use this to distinguish which words are titles in specific fields (term position) and give them a higher weight ranking

			Index ordering
				-can also be ordered by score/weight other than ordered by number
				
			Other indexing challenges (in recommended reading, we wont cover them)
				-compression and memory mngmt
				-index update (new content being published or updated)
					-new data
					-updated data
				-index merging - multiple indexes and merging into one
				-doc deletion	- reveres of update problem
				-distributed indexing - web search, web scale indexes -> cant be stored on single machine, must be distributed accross many machines at different locations e.g map reduce -> distributed memory and mngmt processing





